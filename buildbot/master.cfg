# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties
from buildbot.scheduler import Nightly, Triggerable
from buildbot.status.html import WebStatus
from buildbot.status.web.auth import BasicAuth
from buildbot.status.web.authz import Authz
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload
from buildbot.steps.trigger import Trigger

import local_config as config



################################################################################
#
# General settings
#
################################################################################



c = BuildmasterConfig = {}

c['projectName'] = 'MWorks'
c['projectURL'] = 'http://mworks-project.org/'
c['buildbotURL'] = 'http://%s:%d/' % (config.buildbot_hostname,
                                      config.webstatus_port)

authz = Authz(
    auth = BasicAuth([('mwdev', config.webstatus_pass)]),
    forceBuild = 'auth',
    pingBuilder = True,
    )

c['status'] = [WebStatus(http_port=config.webstatus_port, authz=authz)]

c['properties'] = {
    'MW_VERSION': 'TEST',
    }

installer_filename = 'MWorks-%(MW_VERSION)s.dmg'
installer_slavesrc = '/tmp/mw_installer/' + installer_filename
installer_masterdest = (config.installer_destination_path + '/' +
                        installer_filename)

mw_bin_dir = '/Library/Application Support/MWorks/Developer/bin/'



################################################################################
#
# Build slaves
#
################################################################################



macosx_10_6_x86_64 = 'MacOSX-10.6-x86_64'

slave_names = [macosx_10_6_x86_64]
default_slavename = macosx_10_6_x86_64

c['slaves'] = [BuildSlave(name, config.slave_pass) for name in slave_names]
c['slavePortnum'] = config.slave_port



################################################################################
#
# Build steps
#
################################################################################



build_builder_steps = (

    ('build_all', [

        Git(
            repourl = 'git://github.com/mworks-project/mw_suite.git',
            mode = 'update',
            ),

        # Update submodules ourselves, because the Git step doesn't do
        # so recursively
        ShellCommand(
            command = [
                '/usr/local/git/bin/git',
                'submodule',
                'update',
                '--init',
                '--recursive',
                ],
            description = ['updating', 'submodules'],
            descriptionDone = ['submodules'],
            ),

        ShellCommand(
            workdir = 'build/mw_build',
            command = [
                './build_mworks',
                WithProperties('--mw-version=%(MW_VERSION)s'),
                ],
            description = ['building'],
            descriptionDone = ['build'],
            ),

        ShellCommand(
            workdir = 'build/mw_build/new_installer',
            command = [
                './build_installer',
                WithProperties('%(MW_VERSION)s'),
                ],
            description = ['building', 'installer'],
            descriptionDone = ['installer'],
            ),

        FileUpload(
            slavesrc = WithProperties(installer_slavesrc),
            masterdest = WithProperties(installer_masterdest),
            mode = 0644,
            ),

        ]),

    )


test_builder_steps = tuple(

    ('test_' + arch_name, [
            ShellCommand(
                command = [mw_bin_dir + 'mw_test', '--arch=' + arch_name],
                description = ['testing'],
                descriptionDone = ['test'],
                )
            ])
    for arch_name in ('x86_64', 'i386')

    )


aggregate_builder_steps = tuple(

    (builder_name, [
        Trigger(
            schedulerNames = [component_info[0]],
            waitForFinish = True,
            updateSourceStamp = False,
            copy_properties = ['MW_VERSION'],
            )
        for component_info in builder_steps
        ])
    for builder_name, builder_steps in
    (
        ('test_all', test_builder_steps),
        ('build_and_test_all', (('build_all',), ('test_all',))),
        )

    )



################################################################################
#
# Builders and schedulers
#
################################################################################



c['builders'] = []
c['schedulers'] = [] 


for builder_info in (build_builder_steps,
                     test_builder_steps,
                     aggregate_builder_steps):

    for builder_name, builder_steps in builder_info:
        c['builders'].append(BuilderConfig(
            name = builder_name,
            slavename = default_slavename,
            factory = BuildFactory(builder_steps),
            ))

        c['schedulers'].append(Triggerable(
            name = builder_name,
            builderNames = [builder_name],
            ))


c['schedulers'].append(Nightly(
    name = 'nightly_build_and_test',
    builderNames = ['build_and_test_all'],
    branch = None,
    hour = 0,
    properties = {
        'MW_VERSION': 'NIGHTLY',
        },
    ))
