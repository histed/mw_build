#!/usr/bin/python

import os
from subprocess import check_call
import sys


packagemaker = '/Developer/Applications/Utilities/PackageMaker.app/Contents/MacOS/PackageMaker'
installer_root = '/tmp/mw_installer'
core_package_name = 'MWorksCoreComponents'


package_contents = {

    core_package_name:
        (
        '/Applications/MWClient.app',
        '/Applications/MWEditor.app',
        '/Applications/MWServer.app',
        '/Library/Application Support/MWorks/Configuration/examples',
        '/Library/Application Support/MWorks/Plugins/Core/LowPrioritySchedulerPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/MachClockPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/ZenSchedulerPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/ZenStateSystemPlugin.bundle',
        '/Library/Frameworks/MWorksCocoa.framework',
        '/Library/Frameworks/MWorksCore.framework',
        ),

    'MWorksStandardPlugins':
        (
        '/Library/Application Support/MWorks/Plugins/Client/MWorksBehavioralWindow.bundle',
        '/Library/Application Support/MWorks/Plugins/Client/MWorksVariablesWindow.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/DriftingGratingStimulusPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/HIDPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/MSSWGamepadPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/NE500Plugin.bundle',
        ),

    'MWorksOptionalPlugins':
        (
        '/Library/Application Support/MWorks/Plugins/Client/CalibratorWindow.bundle',
        '/Library/Application Support/MWorks/Plugins/Client/MWorksEyeWindow.bundle',
        '/Library/Application Support/MWorks/Plugins/Client/MWorksRewardWindow.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/CircleStimulusPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/FakeMonkeyPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/ITC18Plugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/MovieStimulusPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/RectangleStimulusPlugin.bundle',
        '/Library/Application Support/MWorks/Plugins/Core/WhiteNoiseBackground.bundle',
        ),

    'MWorksPythonTools':
        (
        '/Library/Application Support/MWorks/Plugins/Client/PythonBridgePlugin.bundle',
        '/Library/Application Support/MWorks/Scripting/Python',
        '/Library/Python/2.6/site-packages/mworks.pth',
        '/Library/Python/2.7/site-packages/mworks.pth',
        ),

    'MWorksMATLABTools':
        (
        '/Library/Application Support/MWorks/Plugins/Client/MWorksMATLABWindow.bundle',
        '/Library/Application Support/MWorks/Scripting/Matlab',
        ),

    'MWorksExampleExperiments':
        (
        '/Library/Application Support/MWorks/Examples',
        ),

    'MWorksDevelopmentFiles':
        (
        '/Library/Application Support/Developer/Shared/Xcode/Project Templates/MWorks',
        '/Library/Application Support/MWorks/Developer',
        ),

    }


def make_destdir(package, path):
    destdir = os.path.join(installer_root, package, os.path.dirname(path[1:]))
    check_call(['mkdir', '-p', destdir])
    return destdir


def copy_path(package, path):
    destdir = make_destdir(package, path)
    check_call(['cp', '-R', path, destdir])


def build_component_package(package_name):
    package_path = os.path.join(installer_root, package_name)
    check_call([packagemaker,
                '--root', package_path,
                '--id', 'org.mworks-project.pkg.' + package_name,
                '--out', package_path + '.pkg',
                '--title', package_name,
                '--target', '10.4',
                '--no-relocate',
                '--root-volume-only',
                ])


def main():
    installer_name = 'MWorks'
    installer_version = sys.argv[1]

    check_call(['rm', '-Rf', installer_root])

    for package_name, contents in package_contents.iteritems():
        for path in contents:
            copy_path(package_name, path)
            build_component_package(package_name)

    dmg_contents_dir = os.path.join(installer_root, '%s %s' % (installer_name, installer_version))
    check_call(['mkdir', dmg_contents_dir])

    installer_path = os.path.join(dmg_contents_dir, installer_name + '.mpkg')
    check_call([packagemaker, '--doc', 'MWorks Installer.pmdoc', '--out', installer_path])
    check_call('rm -Rf ~/.Trash/MWorks*.pkg', shell=True)  # Clean up packagemaker's mess

    scripts_path = os.path.join(installer_path, 'Contents/Packages/%s.pkg/Contents/Resources' % core_package_name)
    check_call(['cp', 'uninstall_mworks', 'preflight', 'postflight', scripts_path])
    check_call(['cp', 'uninstall_mworks', os.path.join(dmg_contents_dir, 'Uninstall MWorks')])

    output_file = os.path.join(installer_root, '%s-%s.dmg' % (installer_name, installer_version))
    check_call(['hdiutil', 'create', '-quiet', '-srcfolder', dmg_contents_dir, output_file])


if __name__ == '__main__':
    main()
